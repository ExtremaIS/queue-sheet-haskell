.\" Automatically generated by Pandoc 2.9.1.1
.\"
.TH "QUEUE-SHEET" "1" "" "queue-sheet-haskell 0.5.0.1 (2021-05-27)" "queue-sheet Manual"
.nh
.SH NAME
.PP
\f[C]queue-sheet\f[R] - queue sheet utility
.SH SYNOPSIS
.PP
\f[C]queue-sheet\f[R] [\f[I]OPTIONS\f[R]] QUEUES.yaml
.SH DESCRIPTION
.PP
Queue Sheet is a utility that builds PDFs of lists.
Printed PDFs can be used to track progress through queues when offline.
.SH OPTIONS
.TP
-h, --help
show help and exit
.TP
--version
show version and exit
.TP
-t, --template \f[I]TEMPLATE.tex\f[R]
template file (default: template.tex)
.TP
-o, --output \f[I]QUEUES.pdf\f[R]
output file
.SH ARGUMENTS
.TP
\f[I]QUEUES.yaml\f[R]
queue file
.SH FILES
.SS \f[C]QUEUES.yaml\f[R]
.PP
A queue is a named list of items.
For example, a podcast can be represented as a queue where the queue
name is the name of the podcast and each item in the queue is an episode
of the podcast.
Queues can optionally be organized into sections.
For example, sections can be used to organize podcast queues by theme.
.PP
Queues are specified in YAML format.
They may be specified in a few different ways, depending on how you want
to organize them.
.PP
To create a queue sheet of queues without sections, the YAML file
consists of an array of queue objects, which have the following
properties:
.TP
\f[I]name\f[R]
queue name (string, required)
.TP
\f[I]url\f[R]
queue URL (string, optional)
.TP
\f[I]date\f[R]
date of last update (string, optional)
.TP
\f[I]tags\f[R]
list of tags (simplified CSV string or array of strings, optional)
.TP
\f[I]prev\f[R]
previous item (item, optional)
.TP
\f[I]next\f[R]
list of next items (simplified CSV string or array of items, optional)
.PP
The only required property is \f[I]name\f[R].
.PP
The \f[I]tags\f[R] property associates one or more string tags with the
queue.
Tags can be specified using a string in simplified CSV format or an
array of strings.
A simplified CSV string is split on commas, and leading/trailing
whitespace is stripped from each item.
A tag must consist of at least one ASCII letter, number, period,
underscore, or dash.
For example, tag \[lq]complete\[rq] can be used to indicate that there
will be no new episodes of a podcast that is complete.
.PP
The \f[I]next\f[R] property is a list of next items in the queue.
When the list is exhausted, the previous item can be specified using the
\f[I]prev\f[R] property.
If both \f[I]prev\f[R] and \f[I]next\f[R] are specified, \f[I]prev\f[R]
is ignored.
.PP
Next items can be specified using a string in simplified CSV format or
an array or items.
A simplified CSV string is split on commas, and leading/trailing
whitespace is stripped from each item.
When specifying items using an array, the item name can be specified
using a string or a number, or an object with the following properties
can be used in order to specify more item information:
.TP
\f[I]name\f[R]
name of the item (string, required)
.TP
\f[I]url\f[R]
item URL (string, optional)
.TP
\f[I]tags\f[R]
list of tags (simplified CSV string or array of strings, optional)
.PP
To organize queues into sections, the YAML file should be written as an
object with two properties:
.TP
\f[I]sections\f[R]
list of sections names (array of strings, optional)
.TP
\f[I]queues\f[R]
list of queue objects (array of queue objects, required)
.PP
Sections names are specified using strings.
The order that the sections are specified determines the order that they
are displayed on the queue sheet.
.PP
Queue objects are as above, with an additional property to specify the
section:
.TP
\f[I]section\f[R]
name of the section (string, optional)
.PP
Queues that are not explicitly associated with a section are associated
with an implicit default section.
.PP
To make it easier to share queue files, imports are also supported.
Import another queue file using an import object instead of a queue
object in an array of queues.
An import object has the following properties:
.TP
\f[I]import\f[R]
path to the queue file to import (string, required)
.TP
\f[I]section\f[R]
section to associate all of the imported queues with (string, optional)
.PP
Paths are relative to the current file.
For example, simply specify the filename of the file to import when the
file is in the same directory.
.PP
When you specify \f[I]section\f[R], the section must be defined in the
current file.
When you do not specify \f[I]section\f[R], the sections of the imported
queues are used, but they must also be defined in the current file.
.SS Template
.PP
YAML files specify the data, and templates determine how that data is
displayed.
A LaTeX template is used to build the PDF, using XeTeX.
Unless specified otherwise, \f[C]template.tex\f[R] is used.
.PP
It is a Jinja2-style template using the following syntax:
.TP
Interpolations
\f[C]<< section.name >>\f[R]
.TP
Tags
\f[C]<! if section.name !>\f[R]
.TP
Comments
\f[C]<# comment #>\f[R]
.PP
The context contains a single value:
.TP
\f[I]sections\f[R]
list of sections
.PP
A section is an object with the following properties:
.TP
\f[I]name\f[R]
name of the section (string)
.TP
\f[I]queues\f[R]
list of queues
.PP
Only sections that contain queues are passed to the template.
The \f[I]name\f[R] property of the default section is empty.
.PP
A queue is an object with the following properties:
.TP
\f[I]name\f[R]
name of the queue (string)
.TP
\f[I]url\f[R]
queue URL or empty string if no URL (string)
.TP
\f[I]date\f[R]
date or empty string if no date (string)
.TP
\f[I]prev_item\f[R]
previous item or empty string if not set (item)
.TP
\f[I]next_items\f[R]
list of next items (list of items)
.PP
Queue tags are exposed as boolean properties prefixed with
\[lq]tag_\[rq].
For example, a tag named \[lq]complete\[rq] is exposed as
\[lq]tag_complete\[rq].
.PP
An item is an object with the following properties:
.TP
\f[I]name\f[R]
name of the item (string)
.TP
\f[I]url\f[R]
item URL or empty string if no URL (string)
.PP
Item tags are exposed as boolean properties prefixed with
\[lq]tag_\[rq].
For example, a tag named \[lq]em\[rq] is exposed as \[lq]tag_em\[rq].
.SS \f[C]QUEUES.pdf\f[R]
.PP
Unless specified otherwise, the built PDF is output to a file with the
same base name as the queues file but with a \f[C].pdf\f[R] extension.
.SH EXIT CODES
.TP
0
no error
.TP
1
execution error
.TP
2
command-line error
.SH PROJECT
.TP
GitHub:
<https://github.com/ExtremaIS/queue-sheet-haskell>
.TP
Reporting issues:
GitHub: <https://github.com/ExtremaIS/queue-sheet-haskell/issues>
.RS
.PP
Email: <bugs@extrema.is>
.RE
.TP
Copyright
Copyright (c) 2020-2021 Travis Cardwell
.TP
License
The MIT License <https://opensource.org/licenses/MIT>
